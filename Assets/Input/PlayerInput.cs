//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Hunting"",
            ""id"": ""88fbae35-2339-47e1-bf2e-670c5074a3d0"",
            ""actions"": [
                {
                    ""name"": ""UsePrimary"",
                    ""type"": ""Button"",
                    ""id"": ""e9511adc-4a0a-4f3c-835b-2b89b425e10f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseSecondary"",
                    ""type"": ""Button"",
                    ""id"": ""ee67add1-c8de-4b4f-a68e-9b519ae2d573"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenWeaponWheel"",
                    ""type"": ""Button"",
                    ""id"": ""518864de-6e45-4afa-8848-7b6971231d07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""7ce7cde9-a82b-4af7-806c-2da234659dd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""ee11ff63-d43e-4a31-a2d1-29726d488556"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quick1"",
                    ""type"": ""Value"",
                    ""id"": ""578fcd47-65d7-484b-bd2c-d6a9c5b6d2b9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Quick2"",
                    ""type"": ""Button"",
                    ""id"": ""e84c593f-8bd6-4ac6-acbc-c2c55984d571"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quick3"",
                    ""type"": ""Button"",
                    ""id"": ""6e3ee953-7b8c-46b5-b4b9-8d4c5a9586be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quick4"",
                    ""type"": ""Button"",
                    ""id"": ""18b6ca5c-d67b-4c11-96f3-3ca04fa58ada"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quick5"",
                    ""type"": ""Button"",
                    ""id"": ""b4e0518d-75d3-4172-94cd-b2ca0ba20805"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quick6"",
                    ""type"": ""Button"",
                    ""id"": ""1da8ed7e-5edf-48ee-9870-0f0d1861d2a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a8f2be82-5fa7-44d4-be3c-075a452ac005"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UsePrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b0e2deb-29db-453c-a3cf-74d911edb3f4"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenWeaponWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e28fc43b-c3c5-4078-8c7f-3110225f4b95"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46bca0ac-997a-4aeb-b88b-c3ba5742d922"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f4e8f20-f97f-4f4e-9b36-15cd764994b3"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quick1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53ed7107-743a-48c9-a437-c6cf47678cc5"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quick2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33dc316f-cac5-4b51-91cb-142808438575"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quick3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5678bf33-2797-49d8-98b9-d726081803b3"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quick4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cb5262a-3ff0-4cf9-b8a3-18ed42342c63"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quick5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d320e440-a6e9-45e5-8e33-e730d671584c"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quick6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81a2a85d-4a85-47a5-9b35-287ff356b669"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseSecondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""House"",
            ""id"": ""e2eb5588-af7f-430e-a97a-0efb99db963e"",
            ""actions"": [
                {
                    ""name"": ""RemoveHoldingFurniture"",
                    ""type"": ""Button"",
                    ""id"": ""7e9746d0-f0cf-4e6c-9be9-4b73937d77a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateHoldingFurniture"",
                    ""type"": ""Value"",
                    ""id"": ""d53f6ebf-6b2a-4cff-a2cf-b515f2886284"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlaceHoldingFurniture"",
                    ""type"": ""Button"",
                    ""id"": ""fd1574a3-773f-413f-a57c-6f4a84434b6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""b2d5ae4d-16a6-4fe4-a692-adc4a0c7a53b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""139e4998-57d7-4c49-9cfb-119bff9f3499"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveHoldingFurniture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""332daacf-74d1-4426-8a59-f95f46dd2208"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""18d94958-3ca4-421e-9051-e4abf3b86319"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateHoldingFurniture"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0f1edf83-2e50-4f95-ac66-6e133745300a"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateHoldingFurniture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e6a5d823-53a6-4947-9b44-efb440446346"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateHoldingFurniture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1474ca4a-7698-4a56-8046-5dc12ba9eda3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceHoldingFurniture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""General"",
            ""id"": ""656cc0c1-4368-478b-a31b-2db416641d28"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""605b43aa-1f41-4c2a-ad06-77927bd0af0d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""56393203-5086-4453-83bd-b76968af45dc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""c7fe8c77-0d63-4112-83b4-6617b82d6d4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""80e6b000-e726-4e7e-ac7d-46b2567db0df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""af245d92-a9c8-42e6-93b7-45dab139b4ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""3f2968be-5c72-4279-a958-b6e10a329813"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenDevConsole"",
                    ""type"": ""Button"",
                    ""id"": ""bdbddca0-1f3d-4805-9d52-ce0b5878f744"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""359a0069-fcd9-437d-8bc7-ce932b5bf031"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9e80bceb-6319-410f-a912-11775ede1ff2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8bc63207-008a-4a14-906a-45f3929f49c5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9302cc55-9911-488d-b52c-668a9b8edafc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cb1d9034-d777-43c5-a755-d804730f9372"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0b9f9896-3465-435b-95fb-5005a63a4bae"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""175ee88c-da63-414a-871c-6d7f70c209b5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fc7bdcb-2df9-4669-8781-e20a6b17b872"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e12c38c-4909-488c-a7bf-d1bac427b34a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad249fb6-4393-4909-b12f-7d58b5bc0205"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f85a97e-4914-4ed4-a4af-192431351d89"",
                    ""path"": ""<Keyboard>/f11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenDevConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shop"",
            ""id"": ""3da84645-c23d-4eb7-a053-adc71a9fa338"",
            ""actions"": [
                {
                    ""name"": ""CloseShop"",
                    ""type"": ""Button"",
                    ""id"": ""d875727b-984b-4a3d-882b-0af4434ac442"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""443109cc-582a-412a-b1de-46be5e720998"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6536dbd-3e34-4b07-8217-ba1a8716bf60"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseMenu"",
            ""id"": ""b610f994-0c60-4904-a80e-ecc23fafa115"",
            ""actions"": [
                {
                    ""name"": ""ResumeGame"",
                    ""type"": ""Button"",
                    ""id"": ""f6e45eb3-4b6b-4d15-8098-13488819e302"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""709f5499-7c5c-4a01-a3b1-94c52f7ea1b3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResumeGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DevConsole"",
            ""id"": ""01bf05d4-3732-4119-8eeb-7642d37e2f42"",
            ""actions"": [
                {
                    ""name"": ""CloseDevConsole"",
                    ""type"": ""Button"",
                    ""id"": ""cce1a102-e4c5-4174-b2a8-fdafdf1c49f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""8c441606-694a-4c89-95d6-3787bb87e88c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""802199c1-1694-4fcd-93b3-583b11a331e1"",
                    ""path"": ""<Keyboard>/f11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseDevConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c031ebb-b1a1-4e13-a88a-10b9e2404da1"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SprintHold"",
            ""id"": ""0c39118d-f3f8-4e42-8918-4635b960bf71"",
            ""actions"": [
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""f968f7ff-cc62-4e48-b257-72d32ea83397"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""004a9b40-927f-41cb-a4f2-badda0df4697"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SprintToggle"",
            ""id"": ""6dcd7e9e-fd6a-4722-9122-a8f62b8085ab"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""63c74a31-8725-4dba-ae80-093e4a54235f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""90632846-37ef-4cd5-b40f-ef91c82f1bf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""69e820e6-9752-4c2e-ad23-65162e0ba152"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""d7d3946b-755b-46f9-9277-da69328a016b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bec9026a-8ba4-4ead-b937-29daaeca5627"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c170bc8f-b22f-434a-96c9-2fa19b882792"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1ed91812-47d3-48b3-a9cb-c4fabca42ba9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""23d881c9-cb80-4e87-8fbc-6e2ddfde6d3e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Hunting
        m_Hunting = asset.FindActionMap("Hunting", throwIfNotFound: true);
        m_Hunting_UsePrimary = m_Hunting.FindAction("UsePrimary", throwIfNotFound: true);
        m_Hunting_UseSecondary = m_Hunting.FindAction("UseSecondary", throwIfNotFound: true);
        m_Hunting_OpenWeaponWheel = m_Hunting.FindAction("OpenWeaponWheel", throwIfNotFound: true);
        m_Hunting_Reload = m_Hunting.FindAction("Reload", throwIfNotFound: true);
        m_Hunting_OpenInventory = m_Hunting.FindAction("OpenInventory", throwIfNotFound: true);
        m_Hunting_Quick1 = m_Hunting.FindAction("Quick1", throwIfNotFound: true);
        m_Hunting_Quick2 = m_Hunting.FindAction("Quick2", throwIfNotFound: true);
        m_Hunting_Quick3 = m_Hunting.FindAction("Quick3", throwIfNotFound: true);
        m_Hunting_Quick4 = m_Hunting.FindAction("Quick4", throwIfNotFound: true);
        m_Hunting_Quick5 = m_Hunting.FindAction("Quick5", throwIfNotFound: true);
        m_Hunting_Quick6 = m_Hunting.FindAction("Quick6", throwIfNotFound: true);
        // House
        m_House = asset.FindActionMap("House", throwIfNotFound: true);
        m_House_RemoveHoldingFurniture = m_House.FindAction("RemoveHoldingFurniture", throwIfNotFound: true);
        m_House_RotateHoldingFurniture = m_House.FindAction("RotateHoldingFurniture", throwIfNotFound: true);
        m_House_PlaceHoldingFurniture = m_House.FindAction("PlaceHoldingFurniture", throwIfNotFound: true);
        m_House_OpenInventory = m_House.FindAction("OpenInventory", throwIfNotFound: true);
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_Look = m_General.FindAction("Look", throwIfNotFound: true);
        m_General_Movement = m_General.FindAction("Movement", throwIfNotFound: true);
        m_General_Crouch = m_General.FindAction("Crouch", throwIfNotFound: true);
        m_General_Jump = m_General.FindAction("Jump", throwIfNotFound: true);
        m_General_Interact = m_General.FindAction("Interact", throwIfNotFound: true);
        m_General_Pause = m_General.FindAction("Pause", throwIfNotFound: true);
        m_General_OpenDevConsole = m_General.FindAction("OpenDevConsole", throwIfNotFound: true);
        // Shop
        m_Shop = asset.FindActionMap("Shop", throwIfNotFound: true);
        m_Shop_CloseShop = m_Shop.FindAction("CloseShop", throwIfNotFound: true);
        // PauseMenu
        m_PauseMenu = asset.FindActionMap("PauseMenu", throwIfNotFound: true);
        m_PauseMenu_ResumeGame = m_PauseMenu.FindAction("ResumeGame", throwIfNotFound: true);
        // DevConsole
        m_DevConsole = asset.FindActionMap("DevConsole", throwIfNotFound: true);
        m_DevConsole_CloseDevConsole = m_DevConsole.FindAction("CloseDevConsole", throwIfNotFound: true);
        m_DevConsole_Submit = m_DevConsole.FindAction("Submit", throwIfNotFound: true);
        // SprintHold
        m_SprintHold = asset.FindActionMap("SprintHold", throwIfNotFound: true);
        m_SprintHold_Run = m_SprintHold.FindAction("Run", throwIfNotFound: true);
        // SprintToggle
        m_SprintToggle = asset.FindActionMap("SprintToggle", throwIfNotFound: true);
        m_SprintToggle_Movement = m_SprintToggle.FindAction("Movement", throwIfNotFound: true);
        m_SprintToggle_Run = m_SprintToggle.FindAction("Run", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hunting
    private readonly InputActionMap m_Hunting;
    private List<IHuntingActions> m_HuntingActionsCallbackInterfaces = new List<IHuntingActions>();
    private readonly InputAction m_Hunting_UsePrimary;
    private readonly InputAction m_Hunting_UseSecondary;
    private readonly InputAction m_Hunting_OpenWeaponWheel;
    private readonly InputAction m_Hunting_Reload;
    private readonly InputAction m_Hunting_OpenInventory;
    private readonly InputAction m_Hunting_Quick1;
    private readonly InputAction m_Hunting_Quick2;
    private readonly InputAction m_Hunting_Quick3;
    private readonly InputAction m_Hunting_Quick4;
    private readonly InputAction m_Hunting_Quick5;
    private readonly InputAction m_Hunting_Quick6;
    public struct HuntingActions
    {
        private @PlayerInput m_Wrapper;
        public HuntingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @UsePrimary => m_Wrapper.m_Hunting_UsePrimary;
        public InputAction @UseSecondary => m_Wrapper.m_Hunting_UseSecondary;
        public InputAction @OpenWeaponWheel => m_Wrapper.m_Hunting_OpenWeaponWheel;
        public InputAction @Reload => m_Wrapper.m_Hunting_Reload;
        public InputAction @OpenInventory => m_Wrapper.m_Hunting_OpenInventory;
        public InputAction @Quick1 => m_Wrapper.m_Hunting_Quick1;
        public InputAction @Quick2 => m_Wrapper.m_Hunting_Quick2;
        public InputAction @Quick3 => m_Wrapper.m_Hunting_Quick3;
        public InputAction @Quick4 => m_Wrapper.m_Hunting_Quick4;
        public InputAction @Quick5 => m_Wrapper.m_Hunting_Quick5;
        public InputAction @Quick6 => m_Wrapper.m_Hunting_Quick6;
        public InputActionMap Get() { return m_Wrapper.m_Hunting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HuntingActions set) { return set.Get(); }
        public void AddCallbacks(IHuntingActions instance)
        {
            if (instance == null || m_Wrapper.m_HuntingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HuntingActionsCallbackInterfaces.Add(instance);
            @UsePrimary.started += instance.OnUsePrimary;
            @UsePrimary.performed += instance.OnUsePrimary;
            @UsePrimary.canceled += instance.OnUsePrimary;
            @UseSecondary.started += instance.OnUseSecondary;
            @UseSecondary.performed += instance.OnUseSecondary;
            @UseSecondary.canceled += instance.OnUseSecondary;
            @OpenWeaponWheel.started += instance.OnOpenWeaponWheel;
            @OpenWeaponWheel.performed += instance.OnOpenWeaponWheel;
            @OpenWeaponWheel.canceled += instance.OnOpenWeaponWheel;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @OpenInventory.started += instance.OnOpenInventory;
            @OpenInventory.performed += instance.OnOpenInventory;
            @OpenInventory.canceled += instance.OnOpenInventory;
            @Quick1.started += instance.OnQuick1;
            @Quick1.performed += instance.OnQuick1;
            @Quick1.canceled += instance.OnQuick1;
            @Quick2.started += instance.OnQuick2;
            @Quick2.performed += instance.OnQuick2;
            @Quick2.canceled += instance.OnQuick2;
            @Quick3.started += instance.OnQuick3;
            @Quick3.performed += instance.OnQuick3;
            @Quick3.canceled += instance.OnQuick3;
            @Quick4.started += instance.OnQuick4;
            @Quick4.performed += instance.OnQuick4;
            @Quick4.canceled += instance.OnQuick4;
            @Quick5.started += instance.OnQuick5;
            @Quick5.performed += instance.OnQuick5;
            @Quick5.canceled += instance.OnQuick5;
            @Quick6.started += instance.OnQuick6;
            @Quick6.performed += instance.OnQuick6;
            @Quick6.canceled += instance.OnQuick6;
        }

        private void UnregisterCallbacks(IHuntingActions instance)
        {
            @UsePrimary.started -= instance.OnUsePrimary;
            @UsePrimary.performed -= instance.OnUsePrimary;
            @UsePrimary.canceled -= instance.OnUsePrimary;
            @UseSecondary.started -= instance.OnUseSecondary;
            @UseSecondary.performed -= instance.OnUseSecondary;
            @UseSecondary.canceled -= instance.OnUseSecondary;
            @OpenWeaponWheel.started -= instance.OnOpenWeaponWheel;
            @OpenWeaponWheel.performed -= instance.OnOpenWeaponWheel;
            @OpenWeaponWheel.canceled -= instance.OnOpenWeaponWheel;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @OpenInventory.started -= instance.OnOpenInventory;
            @OpenInventory.performed -= instance.OnOpenInventory;
            @OpenInventory.canceled -= instance.OnOpenInventory;
            @Quick1.started -= instance.OnQuick1;
            @Quick1.performed -= instance.OnQuick1;
            @Quick1.canceled -= instance.OnQuick1;
            @Quick2.started -= instance.OnQuick2;
            @Quick2.performed -= instance.OnQuick2;
            @Quick2.canceled -= instance.OnQuick2;
            @Quick3.started -= instance.OnQuick3;
            @Quick3.performed -= instance.OnQuick3;
            @Quick3.canceled -= instance.OnQuick3;
            @Quick4.started -= instance.OnQuick4;
            @Quick4.performed -= instance.OnQuick4;
            @Quick4.canceled -= instance.OnQuick4;
            @Quick5.started -= instance.OnQuick5;
            @Quick5.performed -= instance.OnQuick5;
            @Quick5.canceled -= instance.OnQuick5;
            @Quick6.started -= instance.OnQuick6;
            @Quick6.performed -= instance.OnQuick6;
            @Quick6.canceled -= instance.OnQuick6;
        }

        public void RemoveCallbacks(IHuntingActions instance)
        {
            if (m_Wrapper.m_HuntingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHuntingActions instance)
        {
            foreach (var item in m_Wrapper.m_HuntingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HuntingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HuntingActions @Hunting => new HuntingActions(this);

    // House
    private readonly InputActionMap m_House;
    private List<IHouseActions> m_HouseActionsCallbackInterfaces = new List<IHouseActions>();
    private readonly InputAction m_House_RemoveHoldingFurniture;
    private readonly InputAction m_House_RotateHoldingFurniture;
    private readonly InputAction m_House_PlaceHoldingFurniture;
    private readonly InputAction m_House_OpenInventory;
    public struct HouseActions
    {
        private @PlayerInput m_Wrapper;
        public HouseActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RemoveHoldingFurniture => m_Wrapper.m_House_RemoveHoldingFurniture;
        public InputAction @RotateHoldingFurniture => m_Wrapper.m_House_RotateHoldingFurniture;
        public InputAction @PlaceHoldingFurniture => m_Wrapper.m_House_PlaceHoldingFurniture;
        public InputAction @OpenInventory => m_Wrapper.m_House_OpenInventory;
        public InputActionMap Get() { return m_Wrapper.m_House; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HouseActions set) { return set.Get(); }
        public void AddCallbacks(IHouseActions instance)
        {
            if (instance == null || m_Wrapper.m_HouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HouseActionsCallbackInterfaces.Add(instance);
            @RemoveHoldingFurniture.started += instance.OnRemoveHoldingFurniture;
            @RemoveHoldingFurniture.performed += instance.OnRemoveHoldingFurniture;
            @RemoveHoldingFurniture.canceled += instance.OnRemoveHoldingFurniture;
            @RotateHoldingFurniture.started += instance.OnRotateHoldingFurniture;
            @RotateHoldingFurniture.performed += instance.OnRotateHoldingFurniture;
            @RotateHoldingFurniture.canceled += instance.OnRotateHoldingFurniture;
            @PlaceHoldingFurniture.started += instance.OnPlaceHoldingFurniture;
            @PlaceHoldingFurniture.performed += instance.OnPlaceHoldingFurniture;
            @PlaceHoldingFurniture.canceled += instance.OnPlaceHoldingFurniture;
            @OpenInventory.started += instance.OnOpenInventory;
            @OpenInventory.performed += instance.OnOpenInventory;
            @OpenInventory.canceled += instance.OnOpenInventory;
        }

        private void UnregisterCallbacks(IHouseActions instance)
        {
            @RemoveHoldingFurniture.started -= instance.OnRemoveHoldingFurniture;
            @RemoveHoldingFurniture.performed -= instance.OnRemoveHoldingFurniture;
            @RemoveHoldingFurniture.canceled -= instance.OnRemoveHoldingFurniture;
            @RotateHoldingFurniture.started -= instance.OnRotateHoldingFurniture;
            @RotateHoldingFurniture.performed -= instance.OnRotateHoldingFurniture;
            @RotateHoldingFurniture.canceled -= instance.OnRotateHoldingFurniture;
            @PlaceHoldingFurniture.started -= instance.OnPlaceHoldingFurniture;
            @PlaceHoldingFurniture.performed -= instance.OnPlaceHoldingFurniture;
            @PlaceHoldingFurniture.canceled -= instance.OnPlaceHoldingFurniture;
            @OpenInventory.started -= instance.OnOpenInventory;
            @OpenInventory.performed -= instance.OnOpenInventory;
            @OpenInventory.canceled -= instance.OnOpenInventory;
        }

        public void RemoveCallbacks(IHouseActions instance)
        {
            if (m_Wrapper.m_HouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHouseActions instance)
        {
            foreach (var item in m_Wrapper.m_HouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HouseActions @House => new HouseActions(this);

    // General
    private readonly InputActionMap m_General;
    private List<IGeneralActions> m_GeneralActionsCallbackInterfaces = new List<IGeneralActions>();
    private readonly InputAction m_General_Look;
    private readonly InputAction m_General_Movement;
    private readonly InputAction m_General_Crouch;
    private readonly InputAction m_General_Jump;
    private readonly InputAction m_General_Interact;
    private readonly InputAction m_General_Pause;
    private readonly InputAction m_General_OpenDevConsole;
    public struct GeneralActions
    {
        private @PlayerInput m_Wrapper;
        public GeneralActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_General_Look;
        public InputAction @Movement => m_Wrapper.m_General_Movement;
        public InputAction @Crouch => m_Wrapper.m_General_Crouch;
        public InputAction @Jump => m_Wrapper.m_General_Jump;
        public InputAction @Interact => m_Wrapper.m_General_Interact;
        public InputAction @Pause => m_Wrapper.m_General_Pause;
        public InputAction @OpenDevConsole => m_Wrapper.m_General_OpenDevConsole;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void AddCallbacks(IGeneralActions instance)
        {
            if (instance == null || m_Wrapper.m_GeneralActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GeneralActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @OpenDevConsole.started += instance.OnOpenDevConsole;
            @OpenDevConsole.performed += instance.OnOpenDevConsole;
            @OpenDevConsole.canceled += instance.OnOpenDevConsole;
        }

        private void UnregisterCallbacks(IGeneralActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @OpenDevConsole.started -= instance.OnOpenDevConsole;
            @OpenDevConsole.performed -= instance.OnOpenDevConsole;
            @OpenDevConsole.canceled -= instance.OnOpenDevConsole;
        }

        public void RemoveCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGeneralActions instance)
        {
            foreach (var item in m_Wrapper.m_GeneralActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GeneralActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GeneralActions @General => new GeneralActions(this);

    // Shop
    private readonly InputActionMap m_Shop;
    private List<IShopActions> m_ShopActionsCallbackInterfaces = new List<IShopActions>();
    private readonly InputAction m_Shop_CloseShop;
    public struct ShopActions
    {
        private @PlayerInput m_Wrapper;
        public ShopActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseShop => m_Wrapper.m_Shop_CloseShop;
        public InputActionMap Get() { return m_Wrapper.m_Shop; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShopActions set) { return set.Get(); }
        public void AddCallbacks(IShopActions instance)
        {
            if (instance == null || m_Wrapper.m_ShopActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShopActionsCallbackInterfaces.Add(instance);
            @CloseShop.started += instance.OnCloseShop;
            @CloseShop.performed += instance.OnCloseShop;
            @CloseShop.canceled += instance.OnCloseShop;
        }

        private void UnregisterCallbacks(IShopActions instance)
        {
            @CloseShop.started -= instance.OnCloseShop;
            @CloseShop.performed -= instance.OnCloseShop;
            @CloseShop.canceled -= instance.OnCloseShop;
        }

        public void RemoveCallbacks(IShopActions instance)
        {
            if (m_Wrapper.m_ShopActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShopActions instance)
        {
            foreach (var item in m_Wrapper.m_ShopActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShopActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShopActions @Shop => new ShopActions(this);

    // PauseMenu
    private readonly InputActionMap m_PauseMenu;
    private List<IPauseMenuActions> m_PauseMenuActionsCallbackInterfaces = new List<IPauseMenuActions>();
    private readonly InputAction m_PauseMenu_ResumeGame;
    public struct PauseMenuActions
    {
        private @PlayerInput m_Wrapper;
        public PauseMenuActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ResumeGame => m_Wrapper.m_PauseMenu_ResumeGame;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void AddCallbacks(IPauseMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Add(instance);
            @ResumeGame.started += instance.OnResumeGame;
            @ResumeGame.performed += instance.OnResumeGame;
            @ResumeGame.canceled += instance.OnResumeGame;
        }

        private void UnregisterCallbacks(IPauseMenuActions instance)
        {
            @ResumeGame.started -= instance.OnResumeGame;
            @ResumeGame.performed -= instance.OnResumeGame;
            @ResumeGame.canceled -= instance.OnResumeGame;
        }

        public void RemoveCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);

    // DevConsole
    private readonly InputActionMap m_DevConsole;
    private List<IDevConsoleActions> m_DevConsoleActionsCallbackInterfaces = new List<IDevConsoleActions>();
    private readonly InputAction m_DevConsole_CloseDevConsole;
    private readonly InputAction m_DevConsole_Submit;
    public struct DevConsoleActions
    {
        private @PlayerInput m_Wrapper;
        public DevConsoleActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseDevConsole => m_Wrapper.m_DevConsole_CloseDevConsole;
        public InputAction @Submit => m_Wrapper.m_DevConsole_Submit;
        public InputActionMap Get() { return m_Wrapper.m_DevConsole; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DevConsoleActions set) { return set.Get(); }
        public void AddCallbacks(IDevConsoleActions instance)
        {
            if (instance == null || m_Wrapper.m_DevConsoleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DevConsoleActionsCallbackInterfaces.Add(instance);
            @CloseDevConsole.started += instance.OnCloseDevConsole;
            @CloseDevConsole.performed += instance.OnCloseDevConsole;
            @CloseDevConsole.canceled += instance.OnCloseDevConsole;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
        }

        private void UnregisterCallbacks(IDevConsoleActions instance)
        {
            @CloseDevConsole.started -= instance.OnCloseDevConsole;
            @CloseDevConsole.performed -= instance.OnCloseDevConsole;
            @CloseDevConsole.canceled -= instance.OnCloseDevConsole;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
        }

        public void RemoveCallbacks(IDevConsoleActions instance)
        {
            if (m_Wrapper.m_DevConsoleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDevConsoleActions instance)
        {
            foreach (var item in m_Wrapper.m_DevConsoleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DevConsoleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DevConsoleActions @DevConsole => new DevConsoleActions(this);

    // SprintHold
    private readonly InputActionMap m_SprintHold;
    private List<ISprintHoldActions> m_SprintHoldActionsCallbackInterfaces = new List<ISprintHoldActions>();
    private readonly InputAction m_SprintHold_Run;
    public struct SprintHoldActions
    {
        private @PlayerInput m_Wrapper;
        public SprintHoldActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Run => m_Wrapper.m_SprintHold_Run;
        public InputActionMap Get() { return m_Wrapper.m_SprintHold; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SprintHoldActions set) { return set.Get(); }
        public void AddCallbacks(ISprintHoldActions instance)
        {
            if (instance == null || m_Wrapper.m_SprintHoldActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SprintHoldActionsCallbackInterfaces.Add(instance);
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
        }

        private void UnregisterCallbacks(ISprintHoldActions instance)
        {
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
        }

        public void RemoveCallbacks(ISprintHoldActions instance)
        {
            if (m_Wrapper.m_SprintHoldActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISprintHoldActions instance)
        {
            foreach (var item in m_Wrapper.m_SprintHoldActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SprintHoldActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SprintHoldActions @SprintHold => new SprintHoldActions(this);

    // SprintToggle
    private readonly InputActionMap m_SprintToggle;
    private List<ISprintToggleActions> m_SprintToggleActionsCallbackInterfaces = new List<ISprintToggleActions>();
    private readonly InputAction m_SprintToggle_Movement;
    private readonly InputAction m_SprintToggle_Run;
    public struct SprintToggleActions
    {
        private @PlayerInput m_Wrapper;
        public SprintToggleActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_SprintToggle_Movement;
        public InputAction @Run => m_Wrapper.m_SprintToggle_Run;
        public InputActionMap Get() { return m_Wrapper.m_SprintToggle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SprintToggleActions set) { return set.Get(); }
        public void AddCallbacks(ISprintToggleActions instance)
        {
            if (instance == null || m_Wrapper.m_SprintToggleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SprintToggleActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
        }

        private void UnregisterCallbacks(ISprintToggleActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
        }

        public void RemoveCallbacks(ISprintToggleActions instance)
        {
            if (m_Wrapper.m_SprintToggleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISprintToggleActions instance)
        {
            foreach (var item in m_Wrapper.m_SprintToggleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SprintToggleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SprintToggleActions @SprintToggle => new SprintToggleActions(this);
    public interface IHuntingActions
    {
        void OnUsePrimary(InputAction.CallbackContext context);
        void OnUseSecondary(InputAction.CallbackContext context);
        void OnOpenWeaponWheel(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
        void OnQuick1(InputAction.CallbackContext context);
        void OnQuick2(InputAction.CallbackContext context);
        void OnQuick3(InputAction.CallbackContext context);
        void OnQuick4(InputAction.CallbackContext context);
        void OnQuick5(InputAction.CallbackContext context);
        void OnQuick6(InputAction.CallbackContext context);
    }
    public interface IHouseActions
    {
        void OnRemoveHoldingFurniture(InputAction.CallbackContext context);
        void OnRotateHoldingFurniture(InputAction.CallbackContext context);
        void OnPlaceHoldingFurniture(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
    }
    public interface IGeneralActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnOpenDevConsole(InputAction.CallbackContext context);
    }
    public interface IShopActions
    {
        void OnCloseShop(InputAction.CallbackContext context);
    }
    public interface IPauseMenuActions
    {
        void OnResumeGame(InputAction.CallbackContext context);
    }
    public interface IDevConsoleActions
    {
        void OnCloseDevConsole(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
    }
    public interface ISprintHoldActions
    {
        void OnRun(InputAction.CallbackContext context);
    }
    public interface ISprintToggleActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
}
